<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>API</title>

    <!--link  type="text/css" href="API.css"-->
    <style>
        *{
    background-color: rgb(136, 136, 136);
    list-style: square;
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: Arial, Helvetica, sans-serif;
}

h1{
    display: flex;
    flex-direction: row;
    justify-content: space-evenly;

    font-size: 75px;
    color:rgb(211, 211, 211);
}
p{
    color: rgb(153, 153, 153);
}

div{
    /* border: 1px solid black; */
    /* margin: 1em; */
    padding: 1em;
}

#layout{

    height: 200vh;

    display: grid;
    
    grid-template-rows: 0.05fr 4fr 4fr;

    column-gap: 10px;
    row-gap: 10px;
}

#header{
    display: flex;
    justify-content: space-between;

    column-gap: 10px;
    row-gap: 10px;
}

#one{
    flex: content;
    align-items: center;
}

#two{
    flex: auto;
    text-align: center; 
}
#three{
    flex-direction: column-reverse;
}
#row{
    display: flex;
    flex-direction: row;
    justify-content: space-evenly;
}
a{
    margin: 2.5vh;
    width: 200px;
    height: 40px;
    line-height: 40px;
    font-size: 15px;
    letter-spacing: 3px;
    color: rgb(219, 219, 219);
    text-transform: uppercase;
    text-decoration: none;
    text-align: center;
    /*background-image: linear-gradient(-45deg, #E91E63, #00BCD4, #E91E63);*/
    background-image: linear-gradient(-45deg, #EE7752, #E73C7E, rgb(37, 176, 194), rgb(24, 160, 126));
    border-radius: 50px;
    transition: all ease 1s;
    background-size: 400% 400%;
    background-position: 0 0;
    animation: change 30s ease-in-out infinite;
    align-self: center;

}
a:hover{
    background-image: linear-gradient(-45deg, rgb(182, 90, 62), rgb(170, 43, 92), rgb(26, 131, 145), rgb(21, 131, 103));
}
a:active{
    color: rgb(129, 129, 129);
}
@keyframes change{
    0%{
        background-position: 0 50%;  
    }
    50%{
        background-position: 100% 50%;
    }
    100%{
        background-position: 0% 50%;
    }
}
#table,ul,li{
    background-color: rgb(118, 195, 247,0.5);
}
    </style>

</head>

<body>
    <div id="layout">
        <div id="header">
            <div id="two"><h1>Ejercicio en clase:APIs</h1></div>
            <div id="three">
                <ul>
                    <li><h2>Rafael Rios</h2></li>
                    <li><h2>Emilio Sanchez</h2></li>
                    <li><h2>Edgar Rostro</h2></li>
                </ul>
            </div>
        </div>
        <div id="preguntas">
            <div id="a">¿Qué es un API?
            Un Application Programming Interface (API) es software que nos permite canalizar información diferentes programas, como
            podrían ser una aplicación y una base de datos.</div>
            <div id="b">¿Qué es un REST API?
            Un REST API es un tipo de API estandarizado que sigue ciertos parámetros y debe contar con las funciones CRUD.</div>
            <div id="a">Menciona 3 beneficios de REST APIs
            -Trabajan mediante un standard por lo que su uso es sencillo y no exige demasiado.
            -Son escalables dependiendo de las necesidades del programa.
            -Son bastantes eficientes ya sea en proyectos pequeños o proyectos más complejos</div>
            <div id="b">¿Cómo funciona un REST API? Menciona que es y cómo funciona un request, in response, y CRUD.
            Un REST API funciona a través de una solicitud y una respuesta, denominados request y response, la request es mandar
            información o solicitar una acción de otro programa, por lo que este programa responde(response) ya sea con la
            información solicitada o con una confirmación de que la acción solicitada fue cumplida, para el caso específico de un
            REST API, debemos encontrar las funciones CRUD (Create, Delete, Update, Delete), request que por lo regular se
            encuentran por el nombre C-Post: Encargada de agregar informacion a otro programa, por lo regular bases de datos, R-Get:
            Solicita desplegar u obtener información de otro programa, U-Put: Se encarga de actualizar un dato o un conjunto de
            datos en específico, y D-Delete: Elimina información de otro programa.</div>
            <div id="a">¿Qué es NodeJS?
            NodeJS es un entorno de ejecución de código de backend open source que corre en el motor V8 y que permite correr
            javascript fuera del navegador.</div>
            <div id="b">¿Qué es un callback?
            Son funciones que son llamadas al completar una tarea que evitan bloqueos y permiten que se ejecute otro código mientras
            tanto.</div>
            <div id="a">¿Qué es NPM?
            NPM o Node Package Manager, es el administrador de paquetes de NodeJS, similar a HomeBrew y RubyGems. Permite organizar,
            descargar, eliminar y manejar diferentes paquetes y dependencias creados por la comunidad de una manera fácil y rápida.</div>
            <div id="b">¿Cómo se instala, desinstala, y actualizan paquetes con NPM?
            $npm install “”
            $npm uninstall “”
            $cd /path/to/project. $npm update</div>
            <div id="a">¿Dónde instala los paquetes NPM?
            Los paquetes se instalan en un folder llamado node_modules dentro del directorio del proyecto.</div>
            <div id="b">¿Qué es el package.json?
            Package.json es un archivo creado por NodeJS cuando se inicia un nuevo proyecto que tiene todas las dependencias y
            paquetes usados junto con otras cosas que se necesitan para la configuración del proyecto, es especialmente útil cuando
            un proyecto se sube a Github ya que node_modules usualmente pesa bastante y al usar package.json se puede descargar el
            proyecto y decirle a NPM que descargue todos los paquetes y dependencias usadas.</div>
            <div id="a">¿Qué es un módulo? 
                Es una parte de código reusable para exportar objetos</div>
            <div id="b">Describe el event loop de NodeJS 
                Es el subproceso encargado de realizar operaciones de entrada y salida asincrónicamente. Es la lista de espera de las
                funciones</div>
            <div id="a">¿Qué es JSON?
            JSON es un formato de archivo que guarda información de una manera fácil de leer para los humanos, su formato consiste
            en la creación de objetos por lo cual es muy flexible e incluso existen bases de datos que se basan en JSON para su
            estructura como MongoDB.</div>
            <div>
                <h1>Metodos API</h1>

                <div id="row">
                <a href="/add"> Add a user</a>
                <a href="/edit"> Edit a user</a>
                <a href="/remove"> Delete a user</a>
                </div>
                <div id="table">
                    <ul>
                    <% users.forEach(function(user){ %>
                        <li> <%=user.idUser%> | <%= user.Nombre %> | <%= user.Apellido %> | <%= user.Correo %> </li>
                    <%});%>
                    </ul>
                </div>
            </div>
        </div>
            
</body>
</html>